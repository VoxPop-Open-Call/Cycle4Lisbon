AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Type: String
    Description: Name of this stack's enviornment
  StackName:
    Type: String
    Description: Base Name of this stack, this is usually used in prefixes for resources
  IPv4Cidr:
    Type: String
    Description: The IPv4CIDR block for the VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16

Resources:
  #
  # Main VPC
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref IPv4Cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-${Environment}"

  VPCCidrBlockIpv6:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

  #
  # Internet gateways (ipv4, and egress for ipv6)
  #
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-${Environment}"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Required to enable IPv6 Outbound connections
  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC

  #
  # Routing - Subnets
  #
  SubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Route Table for Subnets in the VPC

  SubnetDefaultRoute:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref SubnetRouteTable
      GatewayId: !Ref InternetGateway

  SubnetDefaultIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref SubnetRouteTable
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  #
  # Subnet A
  #
  SubnetA:
    Type: AWS::EC2::Subnet
    # Wait for IPv6 CIDR to be attached to VPC before creating subnet
    DependsOn: VPCCidrBlockIpv6
    Properties:
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 256, 8]]
      Ipv6CidrBlock:
        !Select [0, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-${Environment}-subnet-a"
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SubnetRouteTable
      SubnetId: !Ref SubnetA

  #
  # Subnet B
  #
  SubnetB:
    Type: AWS::EC2::Subnet
    # Wait for IPv6 CIDR to be attached to VPC before creating subnet
    DependsOn: VPCCidrBlockIpv6
    Properties:
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 256, 8]]
      Ipv6CidrBlock:
        !Select [1, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-${Environment}-subnet-b"
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SubnetRouteTable
      SubnetId: !Ref SubnetB

Outputs:
  VpcId:
    Value: !Ref VPC
  PrimaryCidrBlock:
    Value: !GetAtt VPC.CidrBlock
  Ipv6CidrBlock:
    Value: !Select [0, !GetAtt VPC.Ipv6CidrBlocks]
  CidrBlockAssociation:
    Value: !Select [0, !GetAtt VPC.CidrBlockAssociations]
  SubnetIds:
    Value: !Join
      - ","
      - - !Ref SubnetA
        - !Ref SubnetB
